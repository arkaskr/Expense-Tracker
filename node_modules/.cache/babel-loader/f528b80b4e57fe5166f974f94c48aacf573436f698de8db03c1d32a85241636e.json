{"ast":null,"code":"var _jsxFileName = \"/home/arka/Documents/React/Expense-Tracker/src/Components/ExpenseForm/ExpenseForm.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import styles from \"./ExpenseForm.module.css\"\n// import { db } from \"../../FirebaseInit\";\n\n// import { collection, addDoc, onSnapshot } from \"firebase/firestore\";\n\n// const ExpenseForm = ({ addExpense,\n//   expenseToUpdate,\n//   updateExpense,\n//   resetExpenseToUpdate }) => {\n\n//   const [item, setItem] = useState(\"\")\n//   const [amount, setAmount] = useState(\"\")\n\n//   useEffect(() => {\n//     if (!expenseToUpdate) return;\n//     setItem(expenseToUpdate.item);\n//     setAmount(expenseToUpdate.amount);\n//   }, [expenseToUpdate]);\n\n//   useEffect(() => {\n//     const unsub = onSnapshot(collection(db, \"expenses\"), (snapShot) => {\n//       const expenses = snapShot.docs.map((doc) => {\n//         return {\n//           id: doc.id,\n//           ...doc.data()\n//         }\n//       })\n\n//       expenses.forEach(expense => addExpense(expense));\n//     });\n\n//   }, []);\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (parseInt(amount) === 0) {\n//       return;\n//     }\n\n//     const docRef = await addDoc(collection(db, \"expenses\"), {\n//       item,\n//       amount,\n//       createdOn: new Date().getTime()\n//     });\n\n//     if (!expenseToUpdate) {\n//       const expense = {\n//         item,\n//         amount,\n//         id: new Date().getTime()\n//       };\n//       clearInput();\n//       return;\n//     }\n\n//     const expense = {\n//       item,\n//       amount,\n//       id: expenseToUpdate.id\n//     };\n\n//     const result = updateExpense(expense);\n//     if (!result) return;\n//     clearInput();\n//     resetExpenseToUpdate();\n\n//   };\n\n//   const clearInput = () => {\n//     setItem(\"\");\n//     setAmount(\"\");\n//   };\n\n//   return (\n\n//     <form className={styles.form} onSubmit={handleSubmit}>\n\n//       <h3>Add Transaction</h3>\n\n//       <label htmlFor=\"expenseon\">Text</label>\n//       <input\n//         className={styles.input}\n//         id=\"expenseon\"\n//         type=\"text\"\n//         placeholder=\"Expense on What??\"\n//         required\n//         value={item}\n//         onChange={(e) => setItem(e.target.value)}\n//       />\n\n//       <div>\n//         <label htmlFor=\"expenseAmount\">Amount</label>\n//         <div>(negative - expense,positive-income)</div>\n//       </div>\n\n//       <input\n//         className={styles.input}\n//         id=\"expenseAmount\"\n//         type=\"number\"\n//         placeholder=\"Enter amount...\"\n//         required\n//         value={amount}\n//         onChange={(e) => setAmount(e.target.value)}\n//       />\n\n//       <button className={styles.tranbtn}>\n//         {expenseToUpdate ? \"Edit \" : \"Add \"}Transaction</button>\n//     </form>\n//   )\n\n// }\n\n// export default ExpenseForm;\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./ExpenseForm.module.css\";\nimport { db } from \"../../FirebaseInit\";\nimport { collection, addDoc, updateDoc, doc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = ({\n  addExpense,\n  expenseToUpdate,\n  updateExpense,\n  resetExpenseToUpdate\n}) => {\n  _s();\n  const [item, setItem] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  useEffect(() => {\n    if (!expenseToUpdate) return;\n    setItem(expenseToUpdate.item);\n    setAmount(expenseToUpdate.amount);\n  }, [expenseToUpdate]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (parseInt(amount) === 0) return;\n    if (expenseToUpdate) {\n      const docRef = doc(db, \"expenses\", expenseToUpdate.id);\n      try {\n        await updateDoc(docRef, {\n          item,\n          amount: parseInt(amount),\n          createdOn: new Date().getTime()\n        });\n\n        // Once update is successful, update the state as well\n        const updatedExpense = {\n          item,\n          amount,\n          id: expenseToUpdate.id\n        };\n        updateExpense(updatedExpense); // Update state locally\n        resetExpenseToUpdate(); // Reset form after update\n      } catch (error) {\n        console.error(\"Error updating expense: \", error);\n      }\n      return;\n    }\n\n    // If adding a new expense\n    try {\n      const docRef = await addDoc(collection(db, \"expenses\"), {\n        item,\n        amount: parseInt(amount),\n        createdOn: new Date().getTime()\n      });\n      const newExpense = {\n        item,\n        amount,\n        id: docRef.id // Firestore provides the ID for the new document\n      };\n      addExpense(newExpense); // Update state locally\n      clearInput();\n    } catch (error) {\n      console.error(\"Error adding expense: \", error);\n    }\n  };\n  const clearInput = () => {\n    setItem(\"\");\n    setAmount(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [expenseToUpdate ? \"Edit\" : \"Add\", \" Transaction\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"expenseon\",\n      children: \"Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: styles.input,\n      id: \"expenseon\",\n      type: \"text\",\n      placeholder: \"Expense on What??\",\n      required: true,\n      value: item,\n      onChange: e => setItem(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"expenseAmount\",\n      children: \"Amount\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: styles.input,\n      id: \"expenseAmount\",\n      type: \"number\",\n      placeholder: \"Enter amount...\",\n      required: true,\n      value: amount,\n      onChange: e => setAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.tranbtn,\n      children: [expenseToUpdate ? \"Edit\" : \"Add\", \" Transaction\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"Ry8xQo1ZxUBbMpZ1PkXOuxTHFVs=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useEffect","useState","styles","db","collection","addDoc","updateDoc","doc","jsxDEV","_jsxDEV","ExpenseForm","addExpense","expenseToUpdate","updateExpense","resetExpenseToUpdate","_s","item","setItem","amount","setAmount","handleSubmit","e","preventDefault","parseInt","docRef","id","createdOn","Date","getTime","updatedExpense","error","console","newExpense","clearInput","className","form","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","input","type","placeholder","required","value","onChange","target","tranbtn","_c","$RefreshReg$"],"sources":["/home/arka/Documents/React/Expense-Tracker/src/Components/ExpenseForm/ExpenseForm.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"./ExpenseForm.module.css\"\n// import { db } from \"../../FirebaseInit\";\n\n// import { collection, addDoc, onSnapshot } from \"firebase/firestore\";\n\n\n\n// const ExpenseForm = ({ addExpense,\n//   expenseToUpdate,\n//   updateExpense,\n//   resetExpenseToUpdate }) => {\n\n//   const [item, setItem] = useState(\"\")\n//   const [amount, setAmount] = useState(\"\")\n\n//   useEffect(() => {\n//     if (!expenseToUpdate) return;\n//     setItem(expenseToUpdate.item);\n//     setAmount(expenseToUpdate.amount);\n//   }, [expenseToUpdate]);\n\n//   useEffect(() => {\n//     const unsub = onSnapshot(collection(db, \"expenses\"), (snapShot) => {\n//       const expenses = snapShot.docs.map((doc) => {\n//         return {\n//           id: doc.id,\n//           ...doc.data()\n//         }\n//       })\n\n//       expenses.forEach(expense => addExpense(expense));\n//     });\n\n//   }, []);\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (parseInt(amount) === 0) {\n//       return;\n//     }\n\n//     const docRef = await addDoc(collection(db, \"expenses\"), {\n//       item,\n//       amount,\n//       createdOn: new Date().getTime()\n//     });\n\n//     if (!expenseToUpdate) {\n//       const expense = {\n//         item,\n//         amount,\n//         id: new Date().getTime()\n//       };\n//       clearInput();\n//       return;\n//     }\n\n//     const expense = {\n//       item,\n//       amount,\n//       id: expenseToUpdate.id\n//     };\n\n//     const result = updateExpense(expense);\n//     if (!result) return;\n//     clearInput();\n//     resetExpenseToUpdate();\n\n//   };\n\n//   const clearInput = () => {\n//     setItem(\"\");\n//     setAmount(\"\");\n//   };\n\n//   return (\n\n//     <form className={styles.form} onSubmit={handleSubmit}>\n\n//       <h3>Add Transaction</h3>\n\n//       <label htmlFor=\"expenseon\">Text</label>\n//       <input\n//         className={styles.input}\n//         id=\"expenseon\"\n//         type=\"text\"\n//         placeholder=\"Expense on What??\"\n//         required\n//         value={item}\n//         onChange={(e) => setItem(e.target.value)}\n//       />\n\n//       <div>\n//         <label htmlFor=\"expenseAmount\">Amount</label>\n//         <div>(negative - expense,positive-income)</div>\n//       </div>\n\n//       <input\n//         className={styles.input}\n//         id=\"expenseAmount\"\n//         type=\"number\"\n//         placeholder=\"Enter amount...\"\n//         required\n//         value={amount}\n//         onChange={(e) => setAmount(e.target.value)}\n//       />\n\n//       <button className={styles.tranbtn}>\n//         {expenseToUpdate ? \"Edit \" : \"Add \"}Transaction</button>\n//     </form>\n//   )\n\n// }\n\n// export default ExpenseForm;\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./ExpenseForm.module.css\";\nimport { db } from \"../../FirebaseInit\";\nimport { collection, addDoc, updateDoc, doc } from \"firebase/firestore\";\n\nconst ExpenseForm = ({ addExpense, expenseToUpdate, updateExpense, resetExpenseToUpdate }) => {\n  const [item, setItem] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  useEffect(() => {\n    if (!expenseToUpdate) return;\n    setItem(expenseToUpdate.item);\n    setAmount(expenseToUpdate.amount);\n  }, [expenseToUpdate]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (parseInt(amount) === 0) return;\n\n    if (expenseToUpdate) {\n      const docRef = doc(db, \"expenses\", expenseToUpdate.id);\n      try {\n        await updateDoc(docRef, {\n          item,\n          amount: parseInt(amount), \n          createdOn: new Date().getTime(),\n        });\n\n        // Once update is successful, update the state as well\n        const updatedExpense = {\n          item,\n          amount,\n          id: expenseToUpdate.id,\n        };\n\n        updateExpense(updatedExpense); // Update state locally\n        resetExpenseToUpdate(); // Reset form after update\n      } catch (error) {\n        console.error(\"Error updating expense: \", error);\n      }\n      return;\n    }\n\n    // If adding a new expense\n    try {\n      const docRef = await addDoc(collection(db, \"expenses\"), {\n        item,\n        amount: parseInt(amount),\n        createdOn: new Date().getTime(),\n      });\n\n      const newExpense = {\n        item,\n        amount,\n        id: docRef.id, // Firestore provides the ID for the new document\n      };\n\n      addExpense(newExpense); // Update state locally\n      clearInput();\n    } catch (error) {\n      console.error(\"Error adding expense: \", error);\n    }\n  };\n\n  const clearInput = () => {\n    setItem(\"\");\n    setAmount(\"\");\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <h3>{expenseToUpdate ? \"Edit\" : \"Add\"} Transaction</h3>\n\n      <label htmlFor=\"expenseon\">Text</label>\n      <input\n        className={styles.input}\n        id=\"expenseon\"\n        type=\"text\"\n        placeholder=\"Expense on What??\"\n        required\n        value={item}\n        onChange={(e) => setItem(e.target.value)}\n      />\n\n      <label htmlFor=\"expenseAmount\">Amount</label>\n      <input\n        className={styles.input}\n        id=\"expenseAmount\"\n        type=\"number\"\n        placeholder=\"Enter amount...\"\n        required\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n\n      <button className={styles.tranbtn}>{expenseToUpdate ? \"Edit\" : \"Add\"} Transaction</button>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}