{"ast":null,"code":"// import React, { useState, useEffect, useReducer } from 'react';\n// import ExpenseForm from './Components/ExpenseForm/ExpenseForm';\n// import ExpenseInfo from './Components/ExpenseInfo/ExpenseInfo';\n// import ExpenseList from './Components/ExpenseList/ExpenseList';\n// import \"./App.css\";\n\n// import { deleteDoc, doc } from \"firebase/firestore\";\n// import { db } from './FirebaseInit';\n\n// const reducer = (state, action) => {\n//   const { payload } = action;\n//   switch (action.type) {\n//     case \"ADD\": {\n//       const alreadyExists = state.expenses.some(exp => exp.id === payload.expense.id);\n//       if (alreadyExists) return state;\n//       return {\n//         expenses: [payload.expense, ...state.expenses]\n//       };\n//     }\n\n//     case \"DELETE\": {\n//       return {\n//         expenses: state.expenses.filter(expense => expense.id !== payload.id)  // ✅ Only update state\n//       };\n//     }\n\n//     case \"UPDATE_EXPENSE\": {\n//       const expensesDuplicate = [...state.expenses];\n//       expensesDuplicate[payload.expensePos] = payload.expense;\n//       return {\n//         expenses: expensesDuplicate\n//       };\n//     }\n\n//     default:\n//       return state;\n//   }\n// }\n\n// function App() {\n//   useEffect(() => {\n//     document.title = \"Expense Tracker\";\n//   }, []);\n\n//   const [state, dispatch] = useReducer(reducer, { expenses: [] });\n//   const [expenseToUpdate, setExpenseToUpdate] = useState(null);\n\n//   const addExpense = (expense) => {\n//     if (!expense || !expense.id) return;\n//     dispatch({ type: \"ADD\", payload: { expense } });\n//   };\n\n//   const deleteExpense = async (id) => {\n//     try {\n//       const docRef = doc(db, \"expenses\", id);\n//       await deleteDoc(docRef);\n//       dispatch({ type: \"DELETE\", payload: { id } });\n//     } catch (error) {\n//       console.error(\"Error deleting expense:\", error);\n//     }\n//   };\n\n//   const resetExpenseToUpdate = () => {\n//     setExpenseToUpdate(null);\n//   };\n\n//   const updateExpense = (expense) => {\n//     const expensePos = state.expenses\n//       .map(exp => exp.id)\n//       .indexOf(expense.id);\n\n//     if (expensePos === -1) {\n//       return false;\n//     }\n\n//     dispatch({ type: \"UPDATE_EXPENSE\", payload: { expensePos, expense } });\n//     return true;\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"heading\">Expense Tracker</h2>\n//       <div className=\"App\">\n//         <ExpenseForm \n//           addExpense={addExpense}\n//           expenseToUpdate={expenseToUpdate}\n//           updateExpense={updateExpense}\n//           resetExpenseToUpdate={resetExpenseToUpdate} \n//         />\n//         <div className=\"expense\">\n//           <ExpenseInfo expenses={state.expenses} />\n//           <ExpenseList \n//             expenses={state.expenses}\n//             deleteExpense={deleteExpense}\n//             changeExpenseToUpdate={setExpenseToUpdate} \n//           />\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/arka/Documents/React/Expense-Tracker/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useReducer } from 'react';\n// import ExpenseForm from './Components/ExpenseForm/ExpenseForm';\n// import ExpenseInfo from './Components/ExpenseInfo/ExpenseInfo';\n// import ExpenseList from './Components/ExpenseList/ExpenseList';\n// import \"./App.css\";\n\n// import { deleteDoc, doc } from \"firebase/firestore\";\n// import { db } from './FirebaseInit';\n\n// const reducer = (state, action) => {\n//   const { payload } = action;\n//   switch (action.type) {\n//     case \"ADD\": {\n//       const alreadyExists = state.expenses.some(exp => exp.id === payload.expense.id);\n//       if (alreadyExists) return state;\n//       return {\n//         expenses: [payload.expense, ...state.expenses]\n//       };\n//     }\n\n//     case \"DELETE\": {\n//       return {\n//         expenses: state.expenses.filter(expense => expense.id !== payload.id)  // ✅ Only update state\n//       };\n//     }\n\n//     case \"UPDATE_EXPENSE\": {\n//       const expensesDuplicate = [...state.expenses];\n//       expensesDuplicate[payload.expensePos] = payload.expense;\n//       return {\n//         expenses: expensesDuplicate\n//       };\n//     }\n\n//     default:\n//       return state;\n//   }\n// }\n\n// function App() {\n//   useEffect(() => {\n//     document.title = \"Expense Tracker\";\n//   }, []);\n\n//   const [state, dispatch] = useReducer(reducer, { expenses: [] });\n//   const [expenseToUpdate, setExpenseToUpdate] = useState(null);\n\n//   const addExpense = (expense) => {\n//     if (!expense || !expense.id) return;\n//     dispatch({ type: \"ADD\", payload: { expense } });\n//   };\n\n//   const deleteExpense = async (id) => {\n//     try {\n//       const docRef = doc(db, \"expenses\", id);\n//       await deleteDoc(docRef);\n//       dispatch({ type: \"DELETE\", payload: { id } });\n//     } catch (error) {\n//       console.error(\"Error deleting expense:\", error);\n//     }\n//   };\n\n//   const resetExpenseToUpdate = () => {\n//     setExpenseToUpdate(null);\n//   };\n\n//   const updateExpense = (expense) => {\n//     const expensePos = state.expenses\n//       .map(exp => exp.id)\n//       .indexOf(expense.id);\n\n//     if (expensePos === -1) {\n//       return false;\n//     }\n\n//     dispatch({ type: \"UPDATE_EXPENSE\", payload: { expensePos, expense } });\n//     return true;\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"heading\">Expense Tracker</h2>\n//       <div className=\"App\">\n//         <ExpenseForm \n//           addExpense={addExpense}\n//           expenseToUpdate={expenseToUpdate}\n//           updateExpense={updateExpense}\n//           resetExpenseToUpdate={resetExpenseToUpdate} \n//         />\n//         <div className=\"expense\">\n//           <ExpenseInfo expenses={state.expenses} />\n//           <ExpenseList \n//             expenses={state.expenses}\n//             deleteExpense={deleteExpense}\n//             changeExpenseToUpdate={setExpenseToUpdate} \n//           />\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}