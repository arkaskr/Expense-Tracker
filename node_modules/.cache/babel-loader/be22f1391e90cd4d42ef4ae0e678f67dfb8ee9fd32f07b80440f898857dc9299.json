{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import styles from \"./ExpenseForm.module.css\"\n// import { db } from \"../../FirebaseInit\";\n\n// import { collection, addDoc, onSnapshot } from \"firebase/firestore\";\n\n// const ExpenseForm = ({ addExpense,\n//   expenseToUpdate,\n//   updateExpense,\n//   resetExpenseToUpdate }) => {\n\n//   const [item, setItem] = useState(\"\")\n//   const [amount, setAmount] = useState(\"\")\n\n//   useEffect(() => {\n//     if (!expenseToUpdate) return;\n//     setItem(expenseToUpdate.item);\n//     setAmount(expenseToUpdate.amount);\n//   }, [expenseToUpdate]);\n\n//   useEffect(() => {\n//     const unsub = onSnapshot(collection(db, \"expenses\"), (snapShot) => {\n//       const expenses = snapShot.docs.map((doc) => {\n//         return {\n//           id: doc.id,\n//           ...doc.data()\n//         }\n//       })\n\n//       expenses.forEach(expense => addExpense(expense));\n//     });\n\n//   }, []);\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (parseInt(amount) === 0) {\n//       return;\n//     }\n\n//     const docRef = await addDoc(collection(db, \"expenses\"), {\n//       item,\n//       amount,\n//       createdOn: new Date().getTime()\n//     });\n\n//     if (!expenseToUpdate) {\n//       const expense = {\n//         item,\n//         amount,\n//         id: new Date().getTime()\n//       };\n//       clearInput();\n//       return;\n//     }\n\n//     const expense = {\n//       item,\n//       amount,\n//       id: expenseToUpdate.id\n//     };\n\n//     const result = updateExpense(expense);\n//     if (!result) return;\n//     clearInput();\n//     resetExpenseToUpdate();\n\n//   };\n\n//   const clearInput = () => {\n//     setItem(\"\");\n//     setAmount(\"\");\n//   };\n\n//   return (\n\n//     <form className={styles.form} onSubmit={handleSubmit}>\n\n//       <h3>Add Transaction</h3>\n\n//       <label htmlFor=\"expenseon\">Text</label>\n//       <input\n//         className={styles.input}\n//         id=\"expenseon\"\n//         type=\"text\"\n//         placeholder=\"Expense on What??\"\n//         required\n//         value={item}\n//         onChange={(e) => setItem(e.target.value)}\n//       />\n\n//       <div>\n//         <label htmlFor=\"expenseAmount\">Amount</label>\n//         <div>(negative - expense,positive-income)</div>\n//       </div>\n\n//       <input\n//         className={styles.input}\n//         id=\"expenseAmount\"\n//         type=\"number\"\n//         placeholder=\"Enter amount...\"\n//         required\n//         value={amount}\n//         onChange={(e) => setAmount(e.target.value)}\n//       />\n\n//       <button className={styles.tranbtn}>\n//         {expenseToUpdate ? \"Edit \" : \"Add \"}Transaction</button>\n//     </form>\n//   )\n\n// }\n\n// export default ExpenseForm;","map":{"version":3,"names":[],"sources":["/home/arka/Documents/React/Expense-Tracker/src/Components/ExpenseForm/ExpenseForm.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import styles from \"./ExpenseForm.module.css\"\n// import { db } from \"../../FirebaseInit\";\n\n// import { collection, addDoc, onSnapshot } from \"firebase/firestore\";\n\n\n\n// const ExpenseForm = ({ addExpense,\n//   expenseToUpdate,\n//   updateExpense,\n//   resetExpenseToUpdate }) => {\n\n//   const [item, setItem] = useState(\"\")\n//   const [amount, setAmount] = useState(\"\")\n\n//   useEffect(() => {\n//     if (!expenseToUpdate) return;\n//     setItem(expenseToUpdate.item);\n//     setAmount(expenseToUpdate.amount);\n//   }, [expenseToUpdate]);\n\n//   useEffect(() => {\n//     const unsub = onSnapshot(collection(db, \"expenses\"), (snapShot) => {\n//       const expenses = snapShot.docs.map((doc) => {\n//         return {\n//           id: doc.id,\n//           ...doc.data()\n//         }\n//       })\n\n//       expenses.forEach(expense => addExpense(expense));\n//     });\n\n//   }, []);\n\n//   async function handleSubmit(e) {\n//     e.preventDefault();\n\n//     if (parseInt(amount) === 0) {\n//       return;\n//     }\n\n//     const docRef = await addDoc(collection(db, \"expenses\"), {\n//       item,\n//       amount,\n//       createdOn: new Date().getTime()\n//     });\n\n//     if (!expenseToUpdate) {\n//       const expense = {\n//         item,\n//         amount,\n//         id: new Date().getTime()\n//       };\n//       clearInput();\n//       return;\n//     }\n\n//     const expense = {\n//       item,\n//       amount,\n//       id: expenseToUpdate.id\n//     };\n\n//     const result = updateExpense(expense);\n//     if (!result) return;\n//     clearInput();\n//     resetExpenseToUpdate();\n\n//   };\n\n//   const clearInput = () => {\n//     setItem(\"\");\n//     setAmount(\"\");\n//   };\n\n//   return (\n\n//     <form className={styles.form} onSubmit={handleSubmit}>\n\n//       <h3>Add Transaction</h3>\n\n//       <label htmlFor=\"expenseon\">Text</label>\n//       <input\n//         className={styles.input}\n//         id=\"expenseon\"\n//         type=\"text\"\n//         placeholder=\"Expense on What??\"\n//         required\n//         value={item}\n//         onChange={(e) => setItem(e.target.value)}\n//       />\n\n//       <div>\n//         <label htmlFor=\"expenseAmount\">Amount</label>\n//         <div>(negative - expense,positive-income)</div>\n//       </div>\n\n//       <input\n//         className={styles.input}\n//         id=\"expenseAmount\"\n//         type=\"number\"\n//         placeholder=\"Enter amount...\"\n//         required\n//         value={amount}\n//         onChange={(e) => setAmount(e.target.value)}\n//       />\n\n//       <button className={styles.tranbtn}>\n//         {expenseToUpdate ? \"Edit \" : \"Add \"}Transaction</button>\n//     </form>\n//   )\n\n// }\n\n// export default ExpenseForm;"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}